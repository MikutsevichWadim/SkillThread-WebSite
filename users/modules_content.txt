-------------------- File: .\admin.py --------------------
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin

from users.models import User

# Register your models here.

admin.site.register(User, UserAdmin)


-------------------- File: .\apps.py --------------------
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


-------------------- File: .\export_modules.py --------------------
import os

def export_modules_to_file(output_filename="modules_content.txt", excluded_directories=None, allowed_extensions=None):
	"""
	Exports the content of text files in the current directory and its subdirectories
	(excluding specified directories) to a single output file.

	Args:
		output_filename (str, optional): The name of the output file. Defaults to "modules_content.txt".
		excluded_directories (list of str, optional): A list of directory names to exclude.
													Defaults to None (no directories excluded).
		allowed_extensions (list of str, optional): A list of file extensions to include (e.g., ['.py', '.txt']).
													 If None, all files are considered (with extension filtering).
	"""
	
	if excluded_directories is None:
		excluded_directories = []
	if allowed_extensions is None:
		allowed_extensions = ['.py', '.txt', '.ini', '.conf', '.json', '.html', '.css', '.js', '.md', '.rst'] # Common text file extensions
	
	with open(output_filename, 'w', encoding='utf-8') as outfile:
		for root, dirs, files in os.walk('.'):  # Start walking from the current directory
			
			# Robustly exclude directories by checking if the current root path starts with any excluded directory
			if any(root.startswith(os.path.join('.', excluded_dir)) for excluded_dir in excluded_directories):
				continue  # Skip this entire directory and its subdirectories
			
			for filename in files:
				if not any(filename.lower().endswith(ext) for ext in allowed_extensions):
					continue # Skip files that don't have allowed extensions
				
				filepath = os.path.join(root, filename)
				
				try:
					with open(filepath, 'r', encoding='utf-8') as infile:
						content = infile.read()
						
						outfile.write(f"-------------------- File: {filepath} --------------------\n")
						outfile.write(content)
						outfile.write("\n\n") # Add some spacing between files
				
				except Exception as e:
					outfile.write(f"Error reading file: {filepath} - {e}\n\n")
	
	print(f"Content of modules exported to: {output_filename}")

if __name__ == "__main__":
	# Example usage: Exclude directories and specify allowed file extensions
	exclude_dirs = [".venv",'alembic', "__pycache__", ".git", ".idea"] # Directories to exclude
	allowed_file_extensions = ['.py', '.txt', '.ini'] # Only export these file types (add more if needed)
	export_modules_to_file(excluded_directories=exclude_dirs, allowed_extensions=allowed_file_extensions)


-------------------- File: .\forms.py --------------------
from crispy_forms.helper import FormHelper
from django import forms
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import (
	AuthenticationForm,
	PasswordChangeForm,
	SetPasswordMixin,
	UserChangeForm,
	UserCreationForm,
)
from django.forms import ModelForm
from django.urls import reverse_lazy


class LoginUserForm(
	AuthenticationForm,
):
	username = forms.CharField(
		label='Логин',
		widget=forms.TextInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	password = forms.CharField(
		label='Пароль',
		widget=forms.PasswordInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	

class RegisterUserForm(
	UserCreationForm,
):
	username = forms.CharField(
		label='Логин',
		widget=forms.TextInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	email = forms.EmailField(
		label='Электронная почта',
		widget=forms.EmailInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	first_name = forms.CharField(
		label='Имя',
		widget=forms.TextInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	last_name = forms.CharField(
		label='Фамилия',
		widget=forms.TextInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	password1 = forms.CharField(
		label='Пароль',
		widget=forms.PasswordInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	password2 = forms.CharField(
		label='Повтор пароля',
		widget=forms.PasswordInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	
	class Meta:
		model = get_user_model()
		fields = ['username', 'email', 'first_name', 'last_name', 'password1', 'password2']
	
	# def clean_repeat_password(self):
	# 	if self.cleaned_data['password'] != self.cleaned_data['repeat_password']:
	# 		raise forms.ValidationError('Пароли должны совпадать.')
	# 	return self.cleaned_data['repeat_password']
	#
	def clean_email(self):
		email = self.cleaned_data['email']
		if get_user_model().objects.filter(email=email).exists():
			raise forms.ValidationError(
				message='Такой электронный адрес уже используется',
			)
		return email
	
	
class CustomPasswordChangeForm(
	PasswordChangeForm,
):
	old_password = forms.CharField(
		label='Старый пароль',
		strip=False,
		widget=forms.PasswordInput(
			attrs={
				"autocomplete": "current-password",
				"autofocus": True,
				'class': 'form-control',
			}
		),
	)
	new_password1 = forms.CharField(
		label='Новый пароль',
		widget=forms.PasswordInput(
			attrs={
				'class': 'form-control',
			}
		),
	)
	new_password2 = forms.CharField(
		label='Подтверждение пароля',
		widget=forms.PasswordInput(
			attrs={
				'class': 'form-control',
			}
		),
	)
	
class UpdateUserForm(
	UserChangeForm,
):
	username = forms.CharField(
		label='Логин',
		widget=forms.TextInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	email = forms.EmailField(
		label='Электронная почта',
		widget=forms.EmailInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	first_name = forms.CharField(
		label='Имя',
		widget=forms.TextInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	last_name = forms.CharField(
		label='ф',
		widget=forms.TextInput(
			attrs={
				'class': 'form-control',
			},
		),
	)
	
	class Meta:
		model = get_user_model()
		fields = ['username', 'email', 'first_name', 'last_name']


-------------------- File: .\mixins.py --------------------
from django.http import HttpResponseForbidden


class UserIsOwnerMixin:
	"""
	Миксин для проверки, что пользователь пытается изменить только свой профиль.
	"""
	def dispatch(self, request, *args, **kwargs):
		if kwargs.get('pk') and int(kwargs['pk']) != request.user.pk:
			return HttpResponseForbidden("Вы не можете изменять чужой профиль.")
		return super().dispatch(request, *args, **kwargs)


-------------------- File: .\models.py --------------------
import os

from django.contrib.auth.models import AbstractUser
from django.db import models
from django.urls import reverse


def user_avatar_path(instance, filename):
	return os.path.join('avatars', str(instance.id))


class User(
	AbstractUser,
):
	photo = models.ImageField(
		upload_to=user_avatar_path,
		blank=True,
		null=True,
		verbose_name='Аватарка',
	)
	
	class Meta:
		verbose_name = 'Пользователь'
		verbose_name_plural = 'Пользователи'
		
	def get_absolute_url(self):
		return reverse(
			viewname='users:detail',
			kwargs={
				'pk': self.id,
			},
		)


-------------------- File: .\modules_content.txt --------------------


-------------------- File: .\tests.py --------------------
from django.test import TestCase

# Create your tests here.


-------------------- File: .\urls.py --------------------
from django.contrib.auth.views import (
	LogoutView,
	PasswordChangeDoneView,
	PasswordChangeView,
)
from django.urls import path

from . import views

app_name = 'users'

urlpatterns = [
	path(
		route='login/',
		view=views.LoginUser.as_view(),
		name='login',
	),
	path(
		route='logout/',
		view=LogoutView.as_view(),
		name='logout',
	),
	path(
		route='register/',
		view=views.RegisterUser.as_view(),
		name='register',
	),
	path(
		route='<int:pk>',
		view=views.UserDetailView.as_view(),
		name='detail',
	),
	path(
		route='password-change',
		view=views.CustomPasswordChangeView.as_view(),
		name='password-change',
	),
	path(
		route='password-change-done',
		view=views.CustomPasswordChangeDoneView.as_view(),
		name='password-change-done',
	),
	path(
		route='<int:pk>/update',
		view=views.UserUpdateView.as_view(),
		name='update',
	),
]


-------------------- File: .\views.py --------------------
from django.contrib import messages
from django.contrib.auth import (
	authenticate,
	get_user_model,
	login,
	logout,
)
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.views import (
	LoginView,
	PasswordChangeDoneView,
	PasswordChangeView,
)
from django.http import (
	HttpRequest,
	HttpResponse,
	HttpResponseRedirect,
)
from django.shortcuts import render
from django.urls import (
	reverse,
	reverse_lazy,
)
from django.views import View
from django.views.generic import (
	CreateView,
	DetailView,
	ListView,
	UpdateView,
)

from channels.models import Channel
from . import forms
from .forms import (
	CustomPasswordChangeForm,
	UpdateUserForm,
)
from .mixins import UserIsOwnerMixin


class LoginUser(
	LoginView,
):
	form_class = forms.LoginUserForm
	template_name = 'app/form.html'
	extra_context = {
		'form_title': 'Вход в аккаунт',
		'submit_button_inner': 'Войти',
	}

class RegisterUser(
	CreateView,
):
	form_class = forms.RegisterUserForm
	template_name = 'app/form.html'
	success_url = reverse_lazy('users:login')
	extra_context = {
		'form_title': 'Регистрация',
		'submit_button_inner': 'Создать аккаунт',
	}
	
	def get_success_url(self):
		messages.success(
			request=self.request,
			message='Вы успешно зарегистрированы!',
		)
		return super().get_success_url()


class UserDetailView(
	LoginRequiredMixin,
	DetailView,
):
	model = get_user_model()
	template_name = 'users/detail.html'
	

class UserUpdateView(
	LoginRequiredMixin,
	UserIsOwnerMixin,
	UpdateView,
):
	model = get_user_model()
	template_name = 'users/update.html'
	form = UpdateUserForm
	fields = [
		'username',
		'email',
		'first_name',
		'last_name',
	]
	extra_context = {
		'form_title': 'Изменение профиля',
		'submit_button_inner': 'Сохранить',
	}
	def get_success_url(self):
		return reverse(
			viewname='users:detail',
			kwargs={
				'pk': self.object.pk,
			}
		)
	

class CustomPasswordChangeView(
	LoginRequiredMixin,
	UserIsOwnerMixin,
	PasswordChangeView,
):
	form_class = CustomPasswordChangeForm
	template_name = 'users/password-change.html'
	extra_context = {
		'form_title': 'Смена пароля',
		'submit_button_inner': 'Изменить пароль',
	}
	success_url = reverse_lazy(
		viewname='users:password-change-done',
	)


class CustomPasswordChangeDoneView(
	PasswordChangeDoneView,
):
	template_name = 'users/password-change-done.html'


-------------------- File: .\__init__.py --------------------


-------------------- File: .\migrations\0001_initial.py --------------------
# Generated by Django 5.1.4 on 2025-03-04 12:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import users.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=users.models.user_avatar_path, verbose_name='Аватарка')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]


-------------------- File: .\migrations\__init__.py --------------------


-------------------- File: .\templatetags\users_tags.py --------------------
from django import template

register = template.Library()


@register.inclusion_tag(
	filename='users/inclusion/inline.html'
)
def show_user_inline(
	user,
):
	return {
		'user': user,
	}


-------------------- File: .\templatetags\__init__.py --------------------


